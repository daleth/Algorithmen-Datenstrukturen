Algorithm hasLeft(p)
  if ¬valid(p) then
    ThrowInvalidNodeException
  return p.left != null
//  if ¬p.left = null then
//    return true
//  else
//    return false

Algorithm isExternal(p)
// ggf. validieren oder mit hasLeft aufrufen
  return ¬(hasLeft(p) OR hasRight(p))
  ODER
  return p.left = null AND p.right = null


Algorithm parent(p)
  isValid(p)
  if p.parent = null then
    throw NoParentException
  return p.parent

Algorithm leftChild(p)

  if not hasLeft(p) then
    throw NoLeftChildException
    return p.left


Algorithm addRoot(e)
  new <- new Node(e)
  if n != 0 then
    new.left <- root // Man muss sich entscheiden, ob links oder rechts...
    root.parent <- new
  root <- new
  n <- n + 1
  //ggf Tiefe aktualisieren

Algorithm insertLeft(p,e)
  if hasLeft(p) then
    throw ....
  new <- new Node(e)
  new.parent <- p
  p.left <- new
  n <- n + 1
  depth <- depth(p) + 1



Algorithm insertLeft(p,e)
  new <- new Node(e)
  new.parent <- p
  if hasLeft(p) then
    new.left <- p.left
    p.left.parent <- new
  p.left <- new

Algorithm insertChildren(p,e1,e2)
  // e1 is leftChild
  // e2 is rightChild
  if not isExternal(p) then
    Throw Exception

  insertLeft(p, e1)
  insertRight(p,e2)
  n <- n + 2
  depth <- depth(p) + 1




  newLeft <- new Node(e1)
  newLeft.parent <- p
  if hasLeft(p) then
    newLeft.left <- p.left
    p.left.parent <- newLeft
  p.left <- newLeft

  newRight <- new Node(e2)
  newRight.parent <- p
  if hasRight(p) then
    newRight.right <- p.right
    p.right.parent <- newRight
  p.right <- newRight
